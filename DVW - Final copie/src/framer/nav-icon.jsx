// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project e8637dcc282c405e "DaVinci Watches - Finale", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Variant 1' | 'Variant 2' | 'Variant 3' // Variant
 * tap?: Function // Tap
}} Props

 */

/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */
import { routes } from "./chunks/chunk-3QCU63GD.js";

// virtual:nav-icon
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framer.com/m/Nav-Icon-zHzz.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	useActiveVariantCallback,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";
var enabledGestures = {
	kwti3k55p: {
		hover: true,
	},
	s02GjyXFm: {
		hover: true,
	},
};
var cycleOrder = ["s02GjyXFm", "TTAzCNeHa", "kwti3k55p"];
var serializationHash = "framer-g3uXq";
var variantClassNames = {
	kwti3k55p: "framer-v-plrt4q",
	s02GjyXFm: "framer-v-3h8c0m",
	TTAzCNeHa: "framer-v-18bgs5p",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	damping: 60,
	delay: 0,
	mass: 1,
	stiffness: 500,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var humanReadableVariantMap = {
	"Variant 1": "s02GjyXFm",
	"Variant 2": "TTAzCNeHa",
	"Variant 3": "kwti3k55p",
};
var getProps = ({ height, id, tap, width, ...props }) => {
	return {
		...props,
		rJTJ4pQ2O: tap ?? props.rJTJ4pQ2O,
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "s02GjyXFm",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const { style, className, layoutId, variant, rJTJ4pQ2O, ...restProps } =
		getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "s02GjyXFm",
		enabledGestures,
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const { activeVariantCallback, delay } =
		useActiveVariantCallback(baseVariant);
	const onTapm9qfw6 = activeVariantCallback(async (...args) => {
		setGestureState({
			isPressed: false,
		});
		if (rJTJ4pQ2O) {
			const res = await rJTJ4pQ2O(...args);
			if (res === false) return false;
		}
		setVariant("TTAzCNeHa");
	});
	const onTap1v28brt = activeVariantCallback(async (...args) => {
		setGestureState({
			isPressed: false,
		});
		if (rJTJ4pQ2O) {
			const res = await rJTJ4pQ2O(...args);
			if (res === false) return false;
		}
		setVariant("s02GjyXFm");
	});
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-3h8c0m",
							className,
							classNames,
						)}
						data-framer-name={"Variant 1"}
						data-highlight={true}
						layoutDependency={layoutDependency}
						layoutId={"s02GjyXFm"}
						onTap={onTapm9qfw6}
						ref={refBinding}
						style={{
							...style,
						}}
						{...addPropertyOverrides(
							{
								"kwti3k55p-hover": {
									"data-framer-name": void 0,
								},
								"s02GjyXFm-hover": {
									"data-framer-name": void 0,
								},
								kwti3k55p: {
									"data-framer-name": "Variant 3",
								},
								TTAzCNeHa: {
									"data-framer-name": "Variant 2",
									onTap: onTap1v28brt,
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<motion.div
							className={"framer-12xzmt5"}
							layoutDependency={layoutDependency}
							layoutId={"PN66W99pY"}
							style={{
								backgroundColor: "rgb(0, 0, 0)",
								rotate: 0,
							}}
							variants={{
								"s02GjyXFm-hover": {
									rotate: 0,
								},
								kwti3k55p: {
									backgroundColor:
										"var(--token-564427ef-92c1-4e0d-be6a-50ecc1afab8b, rgb(30, 30, 30))",
									rotate: 0,
								},
								TTAzCNeHa: {
									rotate: 45,
								},
							}}
						/>
						<motion.div
							className={"framer-1b5buos"}
							layoutDependency={layoutDependency}
							layoutId={"j54xKM6nU"}
							style={{
								backgroundColor: "rgb(0, 0, 0)",
								rotate: 0,
							}}
							variants={{
								"s02GjyXFm-hover": {
									rotate: 0,
								},
								kwti3k55p: {
									backgroundColor:
										"var(--token-564427ef-92c1-4e0d-be6a-50ecc1afab8b, rgb(30, 30, 30))",
									rotate: 0,
								},
								TTAzCNeHa: {
									rotate: -45,
								},
							}}
						/>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-g3uXq.framer-b2jont, .framer-g3uXq .framer-b2jont { display: block; }",
	".framer-g3uXq.framer-3h8c0m { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: column; flex-wrap: nowrap; gap: 10px; height: 40px; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 40px; }",
	".framer-g3uXq .framer-12xzmt5, .framer-g3uXq .framer-1b5buos { flex: none; height: 1px; overflow: hidden; position: relative; width: 32px; }",
	".framer-g3uXq.framer-v-18bgs5p .framer-1b5buos { left: calc(50.00000000000002% - 32px / 2); position: absolute; top: calc(50.00000000000002% - 1px / 2); z-index: 1; }",
	".framer-g3uXq.framer-v-3h8c0m.hover.framer-3h8c0m, .framer-g3uXq.framer-v-plrt4q.hover.framer-3h8c0m { gap: 8px; }",
];
var FramerZL2QoKess = withCSS(Component, css, "framer-g3uXq");
var stdin_default = FramerZL2QoKess;
FramerZL2QoKess.displayName = "Nav Icon";
FramerZL2QoKess.defaultProps = {
	height: 40,
	width: 40,
};
addPropertyControls(FramerZL2QoKess, {
	variant: {
		options: ["s02GjyXFm", "TTAzCNeHa", "kwti3k55p"],
		optionTitles: ["Variant 1", "Variant 2", "Variant 3"],
		title: "Variant",
		type: ControlType.Enum,
	},
	rJTJ4pQ2O: {
		title: "Tap",
		type: ControlType.EventHandler,
	},
});
addFonts(
	FramerZL2QoKess,
	[
		{
			explicitInter: true,
			fonts: [],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:nav-icon
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "s02GjyXFm",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"e8637dcc282c405e8332e4eab2cb458a196f99fcac27567df85b0de9996f5033"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * Renders NavIconFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale, ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"e8637dcc282c405e8332e4eab2cb458a196f99fcac27567df85b0de9996f5033"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var nav_icon_default = ComponentWithRoot;
export { nav_icon_default as default };
